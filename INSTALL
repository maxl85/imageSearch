Build Prerequisites
===================

- C++ development stuff (I use g++ 4.4)

- cmake (I use version 2.8.5)

- libwt development stuff (I have libwt-dev, libwtdbo-dev, libwtext-dev,
  libwthttp-dev, version 3.10a installed, some may not be necessary)

- some boost development libs (I have libboost-date-time-dev libboost-dev
  libboost-filesystem-dev libboost-program-options-dev libboost-regex-dev
  libboost-signals-dev libboost-thread-dev, libboost-serialization-dev,
  version 1.40.0 installed, some may not be necessary)

- libpqxx-dev (I have 2.6.9, but it currently requires patching one of the
  headers)

- libWavelet, current CVS version, can be obtained from sourceforge [1].

- cxxutil, current git version, can be obtained from github [2].

[1] http://sourceforge.net/projects/wavelet/
[2] http://github.com/mbert/cxxutil


First steps
===========

There a couple of steps which need to be taken before the app can be used. 

First: Import images into the database.
You may use one of the 'import_*.sh' scripts (or a modified copy of one
of them) in the 'importer' dir. The importer script makes some assumptions
to where the images are located (see the import scripts). That path must
correspond to the settings in '/config.h' (don't get confused by the 
absolute path in the DB_PREFIX macro, it's looked for under 'webapp').
Thus before running the importer make sure that the setup is correct
(make the dir names match, move the images to the appropriate dir under
'webapp' if necessary).

Second: Generate the thumbnails.
For this there is a script 'mk_thumbnail.sh'.
To run it, enter the image directory in a Unix shell and do a:

$ ls -1 | grep -v thumb_ | ../mk_thumbnail.sh

This will generate the thumbnail images. It does not matter if you do
this before or after the import step as the import wrapper script (see
above) filters the thumbnail pattern out before importing.

Third: Run the app.
There are several wrapper scripts 'run_*.sh' under 'webapp'. Make sure
the settings in there correspond with the settings in 'config.h'. Then
run the web server via one of the scripts. It will then be available
on your localhost under the given port number.
